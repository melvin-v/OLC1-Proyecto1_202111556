
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import errores.ErrorSintactico;
import instrucciones.*;
import enums.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\011\000\002\020" +
    "\004\000\002\020\003\000\002\017\003\000\002\017\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\007\000" +
    "\002\004\005\000\002\004\006\000\002\004\003\000\002" +
    "\004\021\000\002\004\011\000\002\004\013\000\002\004" +
    "\011\000\002\004\011\000\002\004\014\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\021\004\000" +
    "\002\021\003\000\002\022\004\000\002\022\003\000\002" +
    "\016\011\000\002\015\011\000\002\015\015\000\002\015" +
    "\012\000\002\015\016\000\002\006\013\000\002\006\012" +
    "\000\002\007\004\000\002\007\003\000\002\010\006\000" +
    "\002\010\007\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\004\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\004\005\001\002\000\004\002\253\001" +
    "\002\000\004\005\006\001\002\000\004\027\007\001\002" +
    "\000\004\030\010\001\002\000\004\031\011\001\002\000" +
    "\030\003\026\004\016\033\023\035\027\040\015\041\014" +
    "\042\013\043\031\044\030\051\021\052\024\001\002\000" +
    "\036\003\ufff6\004\ufff6\032\ufff6\033\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\051" +
    "\ufff6\052\ufff6\001\002\000\004\027\245\001\002\000\004" +
    "\027\227\001\002\000\004\021\141\001\002\000\004\052" +
    "\221\001\002\000\032\003\026\004\016\032\217\033\023" +
    "\035\027\040\015\041\014\042\013\043\031\044\030\051" +
    "\021\052\024\001\002\000\032\003\ufffc\004\ufffc\032\ufffc" +
    "\033\ufffc\035\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\051\ufffc\052\ufffc\001\002\000\004\052\212\001\002" +
    "\000\032\003\ufffe\004\ufffe\032\ufffe\033\ufffe\035\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\051\ufffe\052\ufffe" +
    "\001\002\000\004\027\155\001\002\000\004\012\152\001" +
    "\002\000\032\003\ufffd\004\ufffd\032\ufffd\033\ufffd\035\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\051\ufffd\052" +
    "\ufffd\001\002\000\006\021\150\032\151\001\002\000\004" +
    "\027\126\001\002\000\004\017\114\001\002\000\004\031" +
    "\032\001\002\000\026\003\026\033\023\035\027\040\015" +
    "\041\014\042\013\043\031\044\030\051\021\052\024\001" +
    "\002\000\030\003\026\032\035\033\023\035\027\040\015" +
    "\041\014\042\013\043\031\044\030\051\021\052\024\001" +
    "\002\000\034\003\ufffa\032\ufffa\033\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\051" +
    "\ufffa\052\ufffa\001\002\000\004\042\037\001\002\000\034" +
    "\003\ufffb\032\ufffb\033\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\051\ufffb\052\ufffb" +
    "\001\002\000\004\027\040\001\002\000\022\014\051\024" +
    "\053\027\044\046\041\047\043\050\055\052\050\053\045" +
    "\001\002\000\056\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\052\uffd4\053\uffd4\001\002\000\056" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\052\uffdd\053\uffdd\001\002\000\056\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\053" +
    "\uffc9\001\002\000\022\014\051\024\053\027\044\046\041" +
    "\047\043\050\055\052\050\053\045\001\002\000\056\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\052\uffcb\053\uffcb\001\002\000\056\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\046\uffda\047\uffda\050\uffda\052\uffda\053\uffda" +
    "\001\002\000\056\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\052\uffdb\053\uffdb\001\002\000\056" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\046\uffca\047\uffca\050" +
    "\uffca\052\uffca\053\uffca\001\002\000\022\014\051\024\053" +
    "\027\044\046\041\047\043\050\055\052\050\053\045\001" +
    "\002\000\034\006\064\007\060\010\062\011\071\012\065" +
    "\013\066\015\072\016\057\023\061\024\070\025\063\026" +
    "\067\030\107\001\002\000\022\014\051\024\053\027\044" +
    "\046\041\047\043\050\055\052\050\053\045\001\002\000" +
    "\056\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\046\uffdc\047\uffdc" +
    "\050\uffdc\052\uffdc\053\uffdc\001\002\000\056\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\046\uffc8\047\uffc8\050\uffc8\052\uffc8" +
    "\053\uffc8\001\002\000\056\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\063\026\067\027\uffc7\030" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7\053\uffc7\001\002" +
    "\000\022\014\051\024\053\027\044\046\041\047\043\050" +
    "\055\052\050\053\045\001\002\000\022\014\051\024\053" +
    "\027\044\046\041\047\043\050\055\052\050\053\045\001" +
    "\002\000\022\014\051\024\053\027\044\046\041\047\043" +
    "\050\055\052\050\053\045\001\002\000\022\014\051\024" +
    "\053\027\044\046\041\047\043\050\055\052\050\053\045" +
    "\001\002\000\022\014\051\024\053\027\044\046\041\047" +
    "\043\050\055\052\050\053\045\001\002\000\022\014\051" +
    "\024\053\027\044\046\041\047\043\050\055\052\050\053" +
    "\045\001\002\000\022\014\051\024\053\027\044\046\041" +
    "\047\043\050\055\052\050\053\045\001\002\000\022\014" +
    "\051\024\053\027\044\046\041\047\043\050\055\052\050" +
    "\053\045\001\002\000\022\014\051\024\053\027\044\046" +
    "\041\047\043\050\055\052\050\053\045\001\002\000\022" +
    "\014\051\024\053\027\044\046\041\047\043\050\055\052" +
    "\050\053\045\001\002\000\022\014\051\024\053\027\044" +
    "\046\041\047\043\050\055\052\050\053\045\001\002\000" +
    "\022\014\051\024\053\027\044\046\041\047\043\050\055" +
    "\052\050\053\045\001\002\000\056\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\021\uffcc\022\uffcc\023\061\024\070\025\063\026\067\027" +
    "\uffcc\030\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc\053\uffcc" +
    "\001\002\000\056\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\072\016\057\021\uffd0\022\uffd0" +
    "\023\061\024\070\025\063\026\067\027\uffd0\030\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0\001\002\000\056" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\063\026\067\027\uffd7\030\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\052\uffd7\053\uffd7\001\002\000\056\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\053" +
    "\uffd5\001\002\000\056\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\072\016\057\021\uffce\022" +
    "\uffce\023\061\024\070\025\063\026\067\027\uffce\030\uffce" +
    "\046\uffce\047\uffce\050\uffce\052\uffce\053\uffce\001\002\000" +
    "\056\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\072\016\057\021\uffcf\022\uffcf\023\061\024" +
    "\070\025\063\026\067\027\uffcf\030\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\052\uffcf\053\uffcf\001\002\000\056\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\072" +
    "\016\057\021\uffd3\022\uffd3\023\061\024\070\025\063\026" +
    "\067\027\uffd3\030\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3" +
    "\053\uffd3\001\002\000\056\006\uffd6\007\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6\001\002" +
    "\000\056\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\072\016\057\021\uffd1\022\uffd1\023\061" +
    "\024\070\025\063\026\067\027\uffd1\030\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\052\uffd1\053\uffd1\001\002\000\056\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\063" +
    "\026\067\027\uffd8\030\uffd8\046\uffd8\047\uffd8\050\uffd8\052" +
    "\uffd8\053\uffd8\001\002\000\056\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\072\016\057\021" +
    "\uffd2\022\uffd2\023\061\024\070\025\063\026\067\027\uffd2" +
    "\030\uffd2\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\001" +
    "\002\000\056\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021\uffcd\022\uffcd\023" +
    "\061\024\070\025\063\026\067\027\uffcd\030\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\052\uffcd\053\uffcd\001\002\000\004\021" +
    "\110\001\002\000\036\003\ufff3\004\ufff3\032\ufff3\033\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\051\ufff3\052\ufff3\001\002\000\056\006\064" +
    "\007\060\010\062\011\071\012\065\013\066\014\uffc6\015" +
    "\072\016\057\021\uffc6\022\uffc6\023\061\024\070\025\063" +
    "\026\067\027\uffc6\030\uffc6\046\uffc6\047\uffc6\050\uffc6\052" +
    "\uffc6\053\uffc6\001\002\000\034\006\064\007\060\010\062" +
    "\011\071\012\065\013\066\015\072\016\057\023\061\024" +
    "\070\025\063\026\067\030\113\001\002\000\056\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\046\uffd9\047\uffd9\050\uffd9\052" +
    "\uffd9\053\uffd9\001\002\000\004\045\115\001\002\000\004" +
    "\027\116\001\002\000\022\014\051\024\053\027\044\046" +
    "\041\047\043\050\055\052\050\053\045\001\002\000\024" +
    "\014\uffeb\024\uffeb\027\uffeb\030\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\052\uffeb\053\uffeb\001\002\000\052\006\064\007\060" +
    "\010\062\011\071\012\065\013\066\014\uffe9\015\072\016" +
    "\057\023\125\024\070\025\063\026\067\027\uffe9\030\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\052\uffe9\053\uffe9\001\002\000" +
    "\024\014\051\024\053\027\044\030\123\046\041\047\043" +
    "\050\055\052\050\053\045\001\002\000\024\014\uffec\024" +
    "\uffec\027\uffec\030\uffec\046\uffec\047\uffec\050\uffec\052\uffec" +
    "\053\uffec\001\002\000\004\021\124\001\002\000\036\003" +
    "\ufff2\004\ufff2\032\ufff2\033\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\051\ufff2\052" +
    "\ufff2\001\002\000\024\014\uffea\024\uffea\027\044\030\uffea" +
    "\046\uffea\047\uffea\050\uffea\052\uffea\053\uffea\001\002\000" +
    "\022\014\051\024\053\027\044\046\041\047\043\050\055" +
    "\052\050\053\045\001\002\000\034\006\064\007\060\010" +
    "\062\011\071\012\065\013\066\015\072\016\057\023\061" +
    "\024\070\025\063\026\067\030\130\001\002\000\004\031" +
    "\131\001\002\000\004\036\134\001\002\000\010\032\uffe0" +
    "\036\uffe0\037\uffe0\001\002\000\010\032\144\036\134\037" +
    "\142\001\002\000\022\014\051\024\053\027\044\046\041" +
    "\047\043\050\055\052\050\053\045\001\002\000\034\006" +
    "\064\007\060\010\062\011\071\012\065\013\066\015\072" +
    "\016\057\022\136\023\061\024\070\025\063\026\067\001" +
    "\002\000\026\003\026\033\023\035\027\040\015\041\014" +
    "\042\013\043\031\044\030\051\021\052\024\001\002\000" +
    "\034\003\026\032\uffdf\033\023\035\027\036\uffdf\037\uffdf" +
    "\040\140\041\014\042\013\043\031\044\030\051\021\052" +
    "\024\001\002\000\012\021\141\032\uffde\036\uffde\037\uffde" +
    "\001\002\000\036\003\uffef\004\uffef\032\uffef\033\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\051\uffef\052\uffef\001\002\000\004\022\145\001" +
    "\002\000\010\032\uffe1\036\uffe1\037\uffe1\001\002\000\036" +
    "\003\ufff1\004\ufff1\032\ufff1\033\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\051\ufff1" +
    "\052\ufff1\001\002\000\026\003\026\033\023\035\027\040" +
    "\015\041\014\042\013\043\031\044\030\051\021\052\024" +
    "\001\002\000\030\003\026\032\147\033\023\035\027\040" +
    "\015\041\014\042\013\043\031\044\030\051\021\052\024" +
    "\001\002\000\036\003\ufff0\004\ufff0\032\ufff0\033\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\051\ufff0\052\ufff0\001\002\000\036\003\uffee\004" +
    "\uffee\032\uffee\033\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\051\uffee\052\uffee\001" +
    "\002\000\036\003\uffed\004\uffed\032\uffed\033\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\051\uffed\052\uffed\001\002\000\022\014\051\024\053" +
    "\027\044\046\041\047\043\050\055\052\050\053\045\001" +
    "\002\000\034\006\064\007\060\010\062\011\071\012\065" +
    "\013\066\015\072\016\057\021\154\023\061\024\070\025" +
    "\063\026\067\001\002\000\036\003\ufff7\004\ufff7\032\ufff7" +
    "\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\051\ufff7\052\ufff7\001\002\000\022" +
    "\014\051\024\053\027\044\046\041\047\043\050\055\052" +
    "\050\053\045\001\002\000\034\006\064\007\060\010\062" +
    "\011\071\012\065\013\066\015\072\016\057\023\061\024" +
    "\070\025\063\026\067\030\157\001\002\000\004\031\160" +
    "\001\002\000\026\003\026\033\023\035\027\040\015\041" +
    "\014\042\013\043\031\044\030\051\021\052\024\001\002" +
    "\000\030\003\026\032\162\033\023\035\027\040\015\041" +
    "\014\042\013\043\031\044\030\051\021\052\024\001\002" +
    "\000\040\003\uffe7\004\uffe7\032\uffe7\033\uffe7\034\163\035" +
    "\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\044\uffe7\051\uffe7\052\uffe7\001\002\000\006\031\200\033" +
    "\201\001\002\000\040\003\uffe5\004\uffe5\032\uffe5\033\uffe5" +
    "\034\165\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\051\uffe5\052\uffe5\001\002\000\006" +
    "\031\166\033\167\001\002\000\026\003\026\033\023\035" +
    "\027\040\015\041\014\042\013\043\031\044\030\051\021" +
    "\052\024\001\002\000\004\027\170\001\002\000\022\014" +
    "\051\024\053\027\044\046\041\047\043\050\055\052\050" +
    "\053\045\001\002\000\034\006\064\007\060\010\062\011" +
    "\071\012\065\013\066\015\072\016\057\023\061\024\070" +
    "\025\063\026\067\030\172\001\002\000\004\031\173\001" +
    "\002\000\026\003\026\033\023\035\027\040\015\041\014" +
    "\042\013\043\031\044\030\051\021\052\024\001\002\000" +
    "\030\003\026\032\175\033\023\035\027\040\015\041\014" +
    "\042\013\043\031\044\030\051\021\052\024\001\002\000" +
    "\040\003\uffe3\004\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\051\uffe3\052\uffe3\001\002\000\030\003\026\032\177" +
    "\033\023\035\027\040\015\041\014\042\013\043\031\044" +
    "\030\051\021\052\024\001\002\000\036\003\uffe4\004\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\044\uffe4\051\uffe4\052\uffe4\001\002" +
    "\000\026\003\026\033\023\035\027\040\015\041\014\042" +
    "\013\043\031\044\030\051\021\052\024\001\002\000\004" +
    "\027\202\001\002\000\022\014\051\024\053\027\044\046" +
    "\041\047\043\050\055\052\050\053\045\001\002\000\034" +
    "\006\064\007\060\010\062\011\071\012\065\013\066\015" +
    "\072\016\057\023\061\024\070\025\063\026\067\030\204" +
    "\001\002\000\004\031\205\001\002\000\026\003\026\033" +
    "\023\035\027\040\015\041\014\042\013\043\031\044\030" +
    "\051\021\052\024\001\002\000\030\003\026\032\207\033" +
    "\023\035\027\040\015\041\014\042\013\043\031\044\030" +
    "\051\021\052\024\001\002\000\040\003\uffe2\004\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\051\uffe2\052\uffe2\001" +
    "\002\000\030\003\026\032\211\033\023\035\027\040\015" +
    "\041\014\042\013\043\031\044\030\051\021\052\024\001" +
    "\002\000\036\003\uffe6\004\uffe6\032\uffe6\033\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\051\uffe6\052\uffe6\001\002\000\006\012\213\021\214" +
    "\001\002\000\022\014\051\024\053\027\044\046\041\047" +
    "\043\050\055\052\050\053\045\001\002\000\036\003\ufff8" +
    "\004\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\051\ufff8\052\ufff8" +
    "\001\002\000\034\006\064\007\060\010\062\011\071\012" +
    "\065\013\066\015\072\016\057\021\216\023\061\024\070" +
    "\025\063\026\067\001\002\000\036\003\ufff9\004\ufff9\032" +
    "\ufff9\033\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\051\ufff9\052\ufff9\001\002\000" +
    "\004\002\000\001\002\000\032\003\uffff\004\uffff\032\uffff" +
    "\033\uffff\035\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044" +
    "\uffff\051\uffff\052\uffff\001\002\000\004\027\222\001\002" +
    "\000\004\027\223\001\002\000\004\031\224\001\002\000" +
    "\026\003\026\033\023\035\027\040\015\041\014\042\013" +
    "\043\031\044\030\051\021\052\024\001\002\000\030\003" +
    "\026\032\226\033\023\035\027\040\015\041\014\042\013" +
    "\043\031\044\030\051\021\052\024\001\002\000\032\003" +
    "\uffe8\004\uffe8\032\uffe8\033\uffe8\035\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\051\uffe8\052\uffe8\001\002\000" +
    "\004\051\230\001\002\000\004\052\231\001\002\000\004" +
    "\012\232\001\002\000\022\014\051\024\053\027\044\046" +
    "\041\047\043\050\055\052\050\053\045\001\002\000\034" +
    "\006\064\007\060\010\062\011\071\012\065\013\066\015" +
    "\072\016\057\021\234\023\061\024\070\025\063\026\067" +
    "\001\002\000\022\014\051\024\053\027\044\046\041\047" +
    "\043\050\055\052\050\053\045\001\002\000\034\006\064" +
    "\007\060\010\062\011\071\012\065\013\066\015\072\016" +
    "\057\021\236\023\061\024\070\025\063\026\067\001\002" +
    "\000\004\052\237\001\002\000\004\020\240\001\002\000" +
    "\004\030\241\001\002\000\004\031\242\001\002\000\026" +
    "\003\026\033\023\035\027\040\015\041\014\042\013\043" +
    "\031\044\030\051\021\052\024\001\002\000\030\003\026" +
    "\032\244\033\023\035\027\040\015\041\014\042\013\043" +
    "\031\044\030\051\021\052\024\001\002\000\036\003\ufff5" +
    "\004\ufff5\032\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\051\ufff5\052\ufff5" +
    "\001\002\000\022\014\051\024\053\027\044\046\041\047" +
    "\043\050\055\052\050\053\045\001\002\000\034\006\064" +
    "\007\060\010\062\011\071\012\065\013\066\015\072\016" +
    "\057\023\061\024\070\025\063\026\067\030\247\001\002" +
    "\000\004\031\250\001\002\000\026\003\026\033\023\035" +
    "\027\040\015\041\014\042\013\043\031\044\030\051\021" +
    "\052\024\001\002\000\030\003\026\032\252\033\023\035" +
    "\027\040\015\041\014\042\013\043\031\044\030\051\021" +
    "\052\024\001\002\000\036\003\ufff4\004\ufff4\032\ufff4\033" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\051\ufff4\052\ufff4\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\024\015\011\016\017\017\021\020" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\024\015\011\016\017\017\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\032\004\033\015\011\001\001\000\006\004\035\015\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\051\011\046\012\045" +
    "\013\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\111\011\046\012\045" +
    "\013\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\110" +
    "\011\046\012\045\013\041\014\053\001\001\000\002\001" +
    "\001\000\014\005\055\011\046\012\045\013\041\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\105\011\046\012\045\013\041\014\053" +
    "\001\001\000\014\005\104\011\046\012\045\013\041\014" +
    "\053\001\001\000\014\005\103\011\046\012\045\013\041" +
    "\014\053\001\001\000\014\005\102\011\046\012\045\013" +
    "\041\014\053\001\001\000\014\005\101\011\046\012\045" +
    "\013\041\014\053\001\001\000\014\005\100\011\046\012" +
    "\045\013\041\014\053\001\001\000\014\005\077\011\046" +
    "\012\045\013\041\014\053\001\001\000\014\005\076\011" +
    "\046\012\045\013\041\014\053\001\001\000\014\005\075" +
    "\011\046\012\045\013\041\014\053\001\001\000\014\005" +
    "\074\011\046\012\045\013\041\014\053\001\001\000\014" +
    "\005\073\011\046\012\045\013\041\014\053\001\001\000" +
    "\014\005\072\011\046\012\045\013\041\014\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\117\011\046\012\045\013\041\014\053\021\120\022" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\117\011\046\012\045\013\041\014\053\022\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\103\011\046\012\045\013\041\014\053\001" +
    "\001\000\014\005\126\011\046\012\045\013\041\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\132\010\131\001\001\000\002\001\001\000\004\010\142" +
    "\001\001\000\014\005\134\011\046\012\045\013\041\014" +
    "\053\001\001\000\002\001\001\000\010\003\136\004\033" +
    "\015\011\001\001\000\006\004\035\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\145\004\033\015" +
    "\011\001\001\000\006\004\035\015\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\152\011\046\012\045\013\041\014\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\155\011\046\012" +
    "\045\013\041\014\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\160\004\033\015\011\001\001\000" +
    "\006\004\035\015\011\001\001\000\004\006\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\175\004\033\015\011\001\001\000\002\001\001" +
    "\000\014\005\170\011\046\012\045\013\041\014\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\173" +
    "\004\033\015\011\001\001\000\006\004\035\015\011\001" +
    "\001\000\002\001\001\000\006\004\035\015\011\001\001" +
    "\000\002\001\001\000\010\003\207\004\033\015\011\001" +
    "\001\000\002\001\001\000\014\005\202\011\046\012\045" +
    "\013\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\205\004\033\015\011\001\001\000\006" +
    "\004\035\015\011\001\001\000\002\001\001\000\006\004" +
    "\035\015\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\214\011\046\012\045\013\041\014\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\224\004\033" +
    "\015\011\001\001\000\006\004\035\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\232\011\046\012\045\013\041\014" +
    "\053\001\001\000\002\001\001\000\014\005\234\011\046" +
    "\012\045\013\041\014\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\242\004\033\015\011\001\001\000" +
    "\006\004\035\015\011\001\001\000\002\001\001\000\014" +
    "\005\245\011\046\012\045\013\041\014\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\250\004\033" +
    "\015\011\001\001\000\006\004\035\015\011\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public LinkedList<ErrorSintactico> errores = new LinkedList<>();
    public void error_sintactico(Symbol s) {
        if (s.value != null)
            errores.add(new ErrorSintactico(s.value.toString(), s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
                throw new Exception("Error irrecuperable en (linea, columna): " + s.left + ", " + s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= VOID MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ mainstatements LLAVE_DER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		parser.AST=s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatements mainstatement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion t = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatements",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<Instruccion>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatements",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainstatement ::= function 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statements statement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion t = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= statement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<Instruccion>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= TYPEDEF ID IGUAL expr PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Asignacion(t,n,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= TYPEDEF ID PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Declaracion(e,n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= ID IGUAL expr PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ReAsignacion(i,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= if 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= FOR PARENTESIS_IZQ TYPEDEF ID IGUAL expr PUNTO_COMA expr PUNTO_COMA ID INCREMENTO PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Operacion f = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new For(i,e,f,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= WHILE PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new While(e,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= DO LLAVE_IZQ statements LLAVE_DER WHILE PARENTESIS_IZQ expr PARENTESIS_DER PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(e,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= CONSOLE PUNTO WRITE PARENTESIS_IZQ impresiones PARENTESIS_DER PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ImprimirExpresion> s = (LinkedList<ImprimirExpresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Imprimir(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= SWITCH PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ cases LLAVE_DER 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(e,c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= SWITCH PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ cases DEFAULT DOS_PUNTOS statements LLAVE_DER 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(e,c,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= SWITCH_BREAK PUNTO_COMA 
            {
              Instruccion RESULT =null;
		RESULT = new SentenciaBreak();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= error PUNTO_COMA 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= error LLAVE_DER 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // impresiones ::= impresiones impresion 
            {
              LinkedList<ImprimirExpresion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ImprimirExpresion> s = (LinkedList<ImprimirExpresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ImprimirExpresion t = (ImprimirExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // impresiones ::= impresion 
            {
              LinkedList<ImprimirExpresion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ImprimirExpresion s = (ImprimirExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<ImprimirExpresion>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // impresion ::= expr SUMA 
            {
              ImprimirExpresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ImprimirExpresion(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // impresion ::= expr 
            {
              ImprimirExpresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ImprimirExpresion(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function ::= VOID ID PARENTESIS_IZQ PARENTESIS_IZQ LLAVE_IZQ statements LLAVE_DER 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Funcion(f,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(e,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER ELSE LLAVE_IZQ statements LLAVE_DER 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> p = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(e,p,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER elifs 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(e,s,f, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER elifs ELSE LLAVE_IZQ statements LLAVE_DER 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> p = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(e,s,f,p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elifs ::= elifs ELSE IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              LinkedList<Elif> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = f; RESULT.add(new Elif(e, s));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elifs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elifs ::= ELSE IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              LinkedList<Elif> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new LinkedList<Elif>(); RESULT.add(new Elif(e, s));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elifs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cases ::= cases case 
            {
              LinkedList<Case> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Case> s = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case t = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cases ::= case 
            {
              LinkedList<Case> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case s = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<Case>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // case ::= CASE expr DOS_PUNTOS statements 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(e,s, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // case ::= CASE expr DOS_PUNTOS statements SWITCH_BREAK 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Case(e,s, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= symbols 
            {
              Operacion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= unitary 
            {
              Operacion RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion u = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = u;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= aritmetic 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= logical 
            {
              Operacion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion l = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= PARENTESIS_IZQ expr PARENTESIS_DER 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Operacion(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aritmetic ::= expr SUMA expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.SUMA, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aritmetic ::= expr RESTA expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.RESTA, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aritmetic ::= expr MULTIPLICACION expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MULTIPLICACION, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aritmetic ::= expr DIVISION expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.DIVISION, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aritmetic ::= NUM 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operacion(n, EnumTerminals.NUM); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logical ::= expr MAYOR expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MAYOR, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical ::= expr MENOR expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MENOR, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logical ::= expr MAYOR_IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MAYOR_IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logical ::= expr MENOR_IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MENOR_IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // logical ::= expr IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logical ::= expr NO_IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.NO_IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logical ::= expr AND expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.AND, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // logical ::= expr OR expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.OR, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical ::= BOOLEAN 
            {
              Operacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(b, EnumTerminals.BOOL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // symbols ::= ID 
            {
              Operacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(i, EnumTerminals.ID);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // symbols ::= STR 
            {
              Operacion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(s, EnumTerminals.STR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // symbols ::= CHAR 
            {
              Operacion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(c, EnumTerminals.CHAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unitary ::= RESTA expr 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(e, EnumUnitaryOperations.NEGATIVE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitary",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unitary ::= NOT expr 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(e, EnumUnitaryOperations.NOT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitary",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
