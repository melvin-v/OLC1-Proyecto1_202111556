
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import errores.ErrorSintactico;
import instrucciones.*;
import enums.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\011\000\002\017" +
    "\004\000\002\017\003\000\002\016\003\000\002\016\003" +
    "\000\002\022\011\000\002\022\011\000\002\025\004\000" +
    "\002\025\003\000\002\026\007\000\002\026\007\000\002" +
    "\026\007\000\002\026\007\000\002\026\007\000\002\026" +
    "\007\000\002\026\013\000\002\026\013\000\002\033\005" +
    "\000\002\033\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\012\000\002\030\005\000\002\030\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\012\000\002\023" +
    "\004\000\002\023\003\000\002\024\007\000\002\024\007" +
    "\000\002\024\016\000\002\003\004\000\002\003\003\000" +
    "\002\004\007\000\002\004\005\000\002\004\006\000\002" +
    "\004\003\000\002\004\021\000\002\004\011\000\002\004" +
    "\013\000\002\004\011\000\002\004\011\000\002\004\014" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\020\004\000\002\020\003\000\002\021\004\000\002" +
    "\021\003\000\002\015\011\000\002\015\015\000\002\015" +
    "\012\000\002\015\016\000\002\006\013\000\002\006\012" +
    "\000\002\007\004\000\002\007\003\000\002\010\006\000" +
    "\002\010\007\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\004\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\004\005\001\002\000\004\002\u0100\001" +
    "\002\000\004\005\006\001\002\000\004\027\007\001\002" +
    "\000\004\030\010\001\002\000\004\031\011\001\002\000" +
    "\030\003\025\004\016\036\022\040\026\043\015\044\014" +
    "\045\013\046\031\047\030\054\020\055\023\001\002\000" +
    "\036\003\uffdb\004\uffdb\032\uffdb\036\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\054" +
    "\uffdb\055\uffdb\001\002\000\004\027\372\001\002\000\004" +
    "\027\354\001\002\000\004\021\141\001\002\000\006\057" +
    "\221\060\222\001\002\000\032\003\025\004\016\032\217" +
    "\036\022\040\026\043\015\044\014\045\013\046\031\047" +
    "\030\054\020\055\023\001\002\000\004\055\212\001\002" +
    "\000\032\003\ufffe\004\ufffe\032\ufffe\036\ufffe\040\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\054\ufffe\055\ufffe" +
    "\001\002\000\004\027\155\001\002\000\004\012\152\001" +
    "\002\000\032\003\ufffd\004\ufffd\032\ufffd\036\ufffd\040\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\054\ufffd\055" +
    "\ufffd\001\002\000\006\021\150\032\151\001\002\000\004" +
    "\027\126\001\002\000\032\003\ufffc\004\ufffc\032\ufffc\036" +
    "\ufffc\040\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\054\ufffc\055\ufffc\001\002\000\004\017\114\001\002\000" +
    "\004\031\032\001\002\000\026\003\025\036\022\040\026" +
    "\043\015\044\014\045\013\046\031\047\030\054\020\055" +
    "\023\001\002\000\030\003\025\032\035\036\022\040\026" +
    "\043\015\044\014\045\013\046\031\047\030\054\020\055" +
    "\023\001\002\000\034\003\uffdf\032\uffdf\036\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\054\uffdf\055\uffdf\001\002\000\004\045\037\001\002" +
    "\000\034\003\uffe0\032\uffe0\036\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\054\uffe0" +
    "\055\uffe0\001\002\000\004\027\040\001\002\000\022\014" +
    "\052\024\053\027\044\051\041\052\043\053\055\055\050" +
    "\056\045\001\002\000\056\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\051\uffba\052\uffba\053\uffba\055\uffba\056\uffba\001\002" +
    "\000\056\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\056\uffc3\001\002\000\056\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\051\uffaf\052\uffaf\053\uffaf\055" +
    "\uffaf\056\uffaf\001\002\000\022\014\052\024\053\027\044" +
    "\051\041\052\043\053\055\055\050\056\045\001\002\000" +
    "\056\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\055\uffb1\056\uffb1\001\002\000\056\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\051\uffc0\052\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\056\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\055\uffc1\056\uffc1\001\002" +
    "\000\056\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\055\uffb0\056\uffb0\001\002\000\034\006\064" +
    "\007\060\010\062\011\071\012\065\013\066\015\072\016" +
    "\057\023\061\024\070\025\063\026\067\030\110\001\002" +
    "\000\022\014\052\024\053\027\044\051\041\052\043\053" +
    "\055\055\050\056\045\001\002\000\022\014\052\024\053" +
    "\027\044\051\041\052\043\053\055\055\050\056\045\001" +
    "\002\000\056\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\055\uffc2\056\uffc2\001\002\000\056\006" +
    "\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\051\uffae\052\uffae\053\uffae" +
    "\055\uffae\056\uffae\001\002\000\056\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\063\026\067\027" +
    "\uffad\030\uffad\051\uffad\052\uffad\053\uffad\055\uffad\056\uffad" +
    "\001\002\000\022\014\052\024\053\027\044\051\041\052" +
    "\043\053\055\055\050\056\045\001\002\000\022\014\052" +
    "\024\053\027\044\051\041\052\043\053\055\055\050\056" +
    "\045\001\002\000\022\014\052\024\053\027\044\051\041" +
    "\052\043\053\055\055\050\056\045\001\002\000\022\014" +
    "\052\024\053\027\044\051\041\052\043\053\055\055\050" +
    "\056\045\001\002\000\022\014\052\024\053\027\044\051" +
    "\041\052\043\053\055\055\050\056\045\001\002\000\022" +
    "\014\052\024\053\027\044\051\041\052\043\053\055\055" +
    "\050\056\045\001\002\000\022\014\052\024\053\027\044" +
    "\051\041\052\043\053\055\055\050\056\045\001\002\000" +
    "\022\014\052\024\053\027\044\051\041\052\043\053\055" +
    "\055\050\056\045\001\002\000\022\014\052\024\053\027" +
    "\044\051\041\052\043\053\055\055\050\056\045\001\002" +
    "\000\022\014\052\024\053\027\044\051\041\052\043\053" +
    "\055\055\050\056\045\001\002\000\022\014\052\024\053" +
    "\027\044\051\041\052\043\053\055\055\050\056\045\001" +
    "\002\000\022\014\052\024\053\027\044\051\041\052\043" +
    "\053\055\055\050\056\045\001\002\000\056\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\021\uffb2\022\uffb2\023\061\024\070\025\063\026" +
    "\067\027\uffb2\030\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2" +
    "\056\uffb2\001\002\000\056\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\072\016\057\021\uffb6" +
    "\022\uffb6\023\061\024\070\025\063\026\067\027\uffb6\030" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\055\uffb6\056\uffb6\001\002" +
    "\000\056\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\063\026\067\027\uffbd\030\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\055\uffbd\056\uffbd\001\002\000\056\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\051\uffbb\052\uffbb\053\uffbb\055" +
    "\uffbb\056\uffbb\001\002\000\056\006\uffb4\007\uffb4\010\uffb4" +
    "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\072\016\057\021" +
    "\uffb4\022\uffb4\023\061\024\070\025\063\026\067\027\uffb4" +
    "\030\uffb4\051\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4\001" +
    "\002\000\056\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\072\016\057\021\uffb5\022\uffb5\023" +
    "\061\024\070\025\063\026\067\027\uffb5\030\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\055\uffb5\056\uffb5\001\002\000\056\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\072\016\057\021\uffb9\022\uffb9\023\061\024\070\025" +
    "\063\026\067\027\uffb9\030\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\055\uffb9\056\uffb9\001\002\000\056\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\051\uffbc\052\uffbc\053\uffbc\055\uffbc\056\uffbc" +
    "\001\002\000\056\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\072\016\057\021\uffb7\022\uffb7" +
    "\023\061\024\070\025\063\026\067\027\uffb7\030\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7\001\002\000\056" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\063\026\067\027\uffbe\030\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\055\uffbe\056\uffbe\001\002\000\056\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\072\016" +
    "\057\021\uffb8\022\uffb8\023\061\024\070\025\063\026\067" +
    "\027\uffb8\030\uffb8\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056" +
    "\uffb8\001\002\000\056\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\021\uffb3\022" +
    "\uffb3\023\061\024\070\025\063\026\067\027\uffb3\030\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056\uffb3\001\002\000" +
    "\056\006\064\007\060\010\062\011\071\012\065\013\066" +
    "\014\uffac\015\072\016\057\021\uffac\022\uffac\023\061\024" +
    "\070\025\063\026\067\027\uffac\030\uffac\051\uffac\052\uffac" +
    "\053\uffac\055\uffac\056\uffac\001\002\000\004\021\111\001" +
    "\002\000\036\003\uffd8\004\uffd8\032\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\054\uffd8\055\uffd8\001\002\000\034\006\064\007\060" +
    "\010\062\011\071\012\065\013\066\015\072\016\057\023" +
    "\061\024\070\025\063\026\067\030\113\001\002\000\056" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\055\uffbf\056\uffbf\001\002\000\004\050\115\001\002" +
    "\000\004\027\116\001\002\000\022\014\052\024\053\027" +
    "\044\051\041\052\043\053\055\055\050\056\045\001\002" +
    "\000\024\014\uffd0\024\uffd0\027\uffd0\030\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\055\uffd0\056\uffd0\001\002\000\052\006\064" +
    "\007\060\010\062\011\071\012\065\013\066\014\uffce\015" +
    "\072\016\057\023\125\024\070\025\063\026\067\027\uffce" +
    "\030\uffce\051\uffce\052\uffce\053\uffce\055\uffce\056\uffce\001" +
    "\002\000\024\014\052\024\053\027\044\030\123\051\041" +
    "\052\043\053\055\055\050\056\045\001\002\000\024\014" +
    "\uffd1\024\uffd1\027\uffd1\030\uffd1\051\uffd1\052\uffd1\053\uffd1" +
    "\055\uffd1\056\uffd1\001\002\000\004\021\124\001\002\000" +
    "\036\003\uffd7\004\uffd7\032\uffd7\036\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\054" +
    "\uffd7\055\uffd7\001\002\000\024\014\uffcf\024\uffcf\027\044" +
    "\030\uffcf\051\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\001" +
    "\002\000\022\014\052\024\053\027\044\051\041\052\043" +
    "\053\055\055\050\056\045\001\002\000\034\006\064\007" +
    "\060\010\062\011\071\012\065\013\066\015\072\016\057" +
    "\023\061\024\070\025\063\026\067\030\130\001\002\000" +
    "\004\031\131\001\002\000\004\041\134\001\002\000\010" +
    "\032\uffc6\041\uffc6\042\uffc6\001\002\000\010\032\144\041" +
    "\134\042\142\001\002\000\022\014\052\024\053\027\044" +
    "\051\041\052\043\053\055\055\050\056\045\001\002\000" +
    "\034\006\064\007\060\010\062\011\071\012\065\013\066" +
    "\015\072\016\057\022\136\023\061\024\070\025\063\026" +
    "\067\001\002\000\026\003\025\036\022\040\026\043\015" +
    "\044\014\045\013\046\031\047\030\054\020\055\023\001" +
    "\002\000\034\003\025\032\uffc5\036\022\040\026\041\uffc5" +
    "\042\uffc5\043\140\044\014\045\013\046\031\047\030\054" +
    "\020\055\023\001\002\000\012\021\141\032\uffc4\041\uffc4" +
    "\042\uffc4\001\002\000\036\003\uffd4\004\uffd4\032\uffd4\036" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\054\uffd4\055\uffd4\001\002\000\004\022" +
    "\145\001\002\000\010\032\uffc7\041\uffc7\042\uffc7\001\002" +
    "\000\036\003\uffd6\004\uffd6\032\uffd6\036\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\054\uffd6\055\uffd6\001\002\000\026\003\025\036\022\040" +
    "\026\043\015\044\014\045\013\046\031\047\030\054\020" +
    "\055\023\001\002\000\030\003\025\032\147\036\022\040" +
    "\026\043\015\044\014\045\013\046\031\047\030\054\020" +
    "\055\023\001\002\000\036\003\uffd5\004\uffd5\032\uffd5\036" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\054\uffd5\055\uffd5\001\002\000\036\003" +
    "\uffd3\004\uffd3\032\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\054\uffd3\055" +
    "\uffd3\001\002\000\036\003\uffd2\004\uffd2\032\uffd2\036\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\054\uffd2\055\uffd2\001\002\000\022\014\052" +
    "\024\053\027\044\051\041\052\043\053\055\055\050\056" +
    "\045\001\002\000\034\006\064\007\060\010\062\011\071" +
    "\012\065\013\066\015\072\016\057\021\154\023\061\024" +
    "\070\025\063\026\067\001\002\000\036\003\uffdc\004\uffdc" +
    "\032\uffdc\036\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\054\uffdc\055\uffdc\001\002" +
    "\000\022\014\052\024\053\027\044\051\041\052\043\053" +
    "\055\055\050\056\045\001\002\000\034\006\064\007\060" +
    "\010\062\011\071\012\065\013\066\015\072\016\057\023" +
    "\061\024\070\025\063\026\067\030\157\001\002\000\004" +
    "\031\160\001\002\000\026\003\025\036\022\040\026\043" +
    "\015\044\014\045\013\046\031\047\030\054\020\055\023" +
    "\001\002\000\030\003\025\032\162\036\022\040\026\043" +
    "\015\044\014\045\013\046\031\047\030\054\020\055\023" +
    "\001\002\000\040\003\uffcd\004\uffcd\032\uffcd\036\uffcd\037" +
    "\163\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\054\uffcd\055\uffcd\001\002\000\006\031" +
    "\200\036\201\001\002\000\040\003\uffcb\004\uffcb\032\uffcb" +
    "\036\uffcb\037\165\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\054\uffcb\055\uffcb\001\002" +
    "\000\006\031\166\036\167\001\002\000\026\003\025\036" +
    "\022\040\026\043\015\044\014\045\013\046\031\047\030" +
    "\054\020\055\023\001\002\000\004\027\170\001\002\000" +
    "\022\014\052\024\053\027\044\051\041\052\043\053\055" +
    "\055\050\056\045\001\002\000\034\006\064\007\060\010" +
    "\062\011\071\012\065\013\066\015\072\016\057\023\061" +
    "\024\070\025\063\026\067\030\172\001\002\000\004\031" +
    "\173\001\002\000\026\003\025\036\022\040\026\043\015" +
    "\044\014\045\013\046\031\047\030\054\020\055\023\001" +
    "\002\000\030\003\025\032\175\036\022\040\026\043\015" +
    "\044\014\045\013\046\031\047\030\054\020\055\023\001" +
    "\002\000\040\003\uffc9\004\uffc9\032\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\054\uffc9\055\uffc9\001\002\000\030\003\025" +
    "\032\177\036\022\040\026\043\015\044\014\045\013\046" +
    "\031\047\030\054\020\055\023\001\002\000\036\003\uffca" +
    "\004\uffca\032\uffca\036\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\054\uffca\055\uffca" +
    "\001\002\000\026\003\025\036\022\040\026\043\015\044" +
    "\014\045\013\046\031\047\030\054\020\055\023\001\002" +
    "\000\004\027\202\001\002\000\022\014\052\024\053\027" +
    "\044\051\041\052\043\053\055\055\050\056\045\001\002" +
    "\000\034\006\064\007\060\010\062\011\071\012\065\013" +
    "\066\015\072\016\057\023\061\024\070\025\063\026\067" +
    "\030\204\001\002\000\004\031\205\001\002\000\026\003" +
    "\025\036\022\040\026\043\015\044\014\045\013\046\031" +
    "\047\030\054\020\055\023\001\002\000\030\003\025\032" +
    "\207\036\022\040\026\043\015\044\014\045\013\046\031" +
    "\047\030\054\020\055\023\001\002\000\040\003\uffc8\004" +
    "\uffc8\032\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\054\uffc8\055" +
    "\uffc8\001\002\000\030\003\025\032\211\036\022\040\026" +
    "\043\015\044\014\045\013\046\031\047\030\054\020\055" +
    "\023\001\002\000\036\003\uffcc\004\uffcc\032\uffcc\036\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\054\uffcc\055\uffcc\001\002\000\006\012\214" +
    "\021\213\001\002\000\036\003\uffdd\004\uffdd\032\uffdd\036" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\054\uffdd\055\uffdd\001\002\000\022\014" +
    "\052\024\053\027\044\051\041\052\043\053\055\055\050" +
    "\056\045\001\002\000\034\006\064\007\060\010\062\011" +
    "\071\012\065\013\066\015\072\016\057\021\216\023\061" +
    "\024\070\025\063\026\067\001\002\000\036\003\uffde\004" +
    "\uffde\032\uffde\036\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\054\uffde\055\uffde\001" +
    "\002\000\004\002\000\001\002\000\032\003\uffff\004\uffff" +
    "\032\uffff\036\uffff\040\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\054\uffff\055\uffff\001\002\000\004\027\325" +
    "\001\002\000\004\027\223\001\002\000\004\030\224\001" +
    "\002\000\004\031\225\001\002\000\004\054\227\001\002" +
    "\000\006\032\ufff8\054\ufff8\001\002\000\012\034\236\064" +
    "\235\065\234\066\233\001\002\000\006\032\232\054\227" +
    "\001\002\000\006\032\ufff9\054\ufff9\001\002\000\032\003" +
    "\ufffa\004\ufffa\032\ufffa\036\ufffa\040\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\054\ufffa\055\ufffa\001\002\000" +
    "\004\012\320\001\002\000\004\012\313\001\002\000\004" +
    "\012\306\001\002\000\004\035\237\001\002\000\006\067" +
    "\241\070\240\001\002\000\004\012\264\001\002\000\004" +
    "\012\242\001\002\000\004\031\243\001\002\000\010\052" +
    "\250\055\244\061\245\001\002\000\006\032\uffed\033\uffed" +
    "\001\002\000\004\031\255\001\002\000\006\032\252\033" +
    "\251\001\002\000\006\032\uffee\033\uffee\001\002\000\006" +
    "\032\uffec\033\uffec\001\002\000\010\052\250\055\244\061" +
    "\245\001\002\000\004\021\253\001\002\000\006\032\ufff1" +
    "\054\ufff1\001\002\000\006\032\uffef\033\uffef\001\002\000" +
    "\004\062\256\001\002\000\004\033\257\001\002\000\004" +
    "\052\260\001\002\000\004\033\261\001\002\000\004\052" +
    "\262\001\002\000\004\032\263\001\002\000\006\032\uffeb" +
    "\033\uffeb\001\002\000\004\031\265\001\002\000\010\051" +
    "\267\055\266\061\270\001\002\000\006\032\uffe8\033\uffe8" +
    "\001\002\000\006\032\uffe7\033\uffe7\001\002\000\004\031" +
    "\277\001\002\000\006\032\uffe9\033\uffe9\001\002\000\006" +
    "\032\274\033\273\001\002\000\010\051\267\055\266\061" +
    "\270\001\002\000\004\021\275\001\002\000\006\032\ufff0" +
    "\054\ufff0\001\002\000\006\032\uffea\033\uffea\001\002\000" +
    "\004\062\300\001\002\000\004\033\301\001\002\000\004" +
    "\052\302\001\002\000\004\033\303\001\002\000\004\052" +
    "\304\001\002\000\004\032\305\001\002\000\006\032\uffe6" +
    "\033\uffe6\001\002\000\006\052\310\055\307\001\002\000" +
    "\004\021\312\001\002\000\004\021\311\001\002\000\006" +
    "\032\ufff4\054\ufff4\001\002\000\006\032\ufff5\054\ufff5\001" +
    "\002\000\006\052\315\055\314\001\002\000\004\021\317" +
    "\001\002\000\004\021\316\001\002\000\006\032\ufff3\054" +
    "\ufff3\001\002\000\006\032\ufff2\054\ufff2\001\002\000\006" +
    "\052\322\055\321\001\002\000\004\021\324\001\002\000" +
    "\004\021\323\001\002\000\006\032\ufff6\054\ufff6\001\002" +
    "\000\006\032\ufff7\054\ufff7\001\002\000\004\030\326\001" +
    "\002\000\004\031\327\001\002\000\004\054\332\001\002" +
    "\000\006\032\353\054\332\001\002\000\006\032\uffe4\054" +
    "\uffe4\001\002\000\004\055\333\001\002\000\004\012\334" +
    "\001\002\000\010\051\335\052\337\061\336\001\002\000" +
    "\004\021\351\001\002\000\004\031\341\001\002\000\004" +
    "\021\340\001\002\000\006\032\uffe3\054\uffe3\001\002\000" +
    "\004\062\342\001\002\000\004\033\343\001\002\000\004" +
    "\052\344\001\002\000\004\033\345\001\002\000\004\052" +
    "\346\001\002\000\004\032\347\001\002\000\004\021\350" +
    "\001\002\000\006\032\uffe1\054\uffe1\001\002\000\006\032" +
    "\uffe2\054\uffe2\001\002\000\006\032\uffe5\054\uffe5\001\002" +
    "\000\032\003\ufffb\004\ufffb\032\ufffb\036\ufffb\040\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\054\ufffb\055\ufffb" +
    "\001\002\000\004\054\355\001\002\000\004\055\356\001" +
    "\002\000\004\012\357\001\002\000\022\014\052\024\053" +
    "\027\044\051\041\052\043\053\055\055\050\056\045\001" +
    "\002\000\034\006\064\007\060\010\062\011\071\012\065" +
    "\013\066\015\072\016\057\021\361\023\061\024\070\025" +
    "\063\026\067\001\002\000\022\014\052\024\053\027\044" +
    "\051\041\052\043\053\055\055\050\056\045\001\002\000" +
    "\034\006\064\007\060\010\062\011\071\012\065\013\066" +
    "\015\072\016\057\021\363\023\061\024\070\025\063\026" +
    "\067\001\002\000\004\055\364\001\002\000\004\020\365" +
    "\001\002\000\004\030\366\001\002\000\004\031\367\001" +
    "\002\000\026\003\025\036\022\040\026\043\015\044\014" +
    "\045\013\046\031\047\030\054\020\055\023\001\002\000" +
    "\030\003\025\032\371\036\022\040\026\043\015\044\014" +
    "\045\013\046\031\047\030\054\020\055\023\001\002\000" +
    "\036\003\uffda\004\uffda\032\uffda\036\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\054" +
    "\uffda\055\uffda\001\002\000\022\014\052\024\053\027\044" +
    "\051\041\052\043\053\055\055\050\056\045\001\002\000" +
    "\034\006\064\007\060\010\062\011\071\012\065\013\066" +
    "\015\072\016\057\023\061\024\070\025\063\026\067\030" +
    "\374\001\002\000\004\031\375\001\002\000\026\003\025" +
    "\036\022\040\026\043\015\044\014\045\013\046\031\047" +
    "\030\054\020\055\023\001\002\000\030\003\025\032\377" +
    "\036\022\040\026\043\015\044\014\045\013\046\031\047" +
    "\030\054\020\055\023\001\002\000\036\003\uffd9\004\uffd9" +
    "\032\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\054\uffd9\055\uffd9\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\023\015\011\016\020\017\016\022" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\023\015\011\016\217\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\032\004\033\015\011\001\001\000\006\004\035\015\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\050\011\046\012\045" +
    "\013\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\111\011\046\012\045" +
    "\013\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\106\011\046\012\045\013\041\014\053\001" +
    "\001\000\014\005\055\011\046\012\045\013\041\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\105\011\046\012\045\013\041\014\053" +
    "\001\001\000\014\005\104\011\046\012\045\013\041\014" +
    "\053\001\001\000\014\005\103\011\046\012\045\013\041" +
    "\014\053\001\001\000\014\005\102\011\046\012\045\013" +
    "\041\014\053\001\001\000\014\005\101\011\046\012\045" +
    "\013\041\014\053\001\001\000\014\005\100\011\046\012" +
    "\045\013\041\014\053\001\001\000\014\005\077\011\046" +
    "\012\045\013\041\014\053\001\001\000\014\005\076\011" +
    "\046\012\045\013\041\014\053\001\001\000\014\005\075" +
    "\011\046\012\045\013\041\014\053\001\001\000\014\005" +
    "\074\011\046\012\045\013\041\014\053\001\001\000\014" +
    "\005\073\011\046\012\045\013\041\014\053\001\001\000" +
    "\014\005\072\011\046\012\045\013\041\014\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\117\011\046\012\045\013\041\014\053\020\120\021" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\117\011\046\012\045\013\041\014\053\021\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\103\011\046\012\045\013\041\014\053\001" +
    "\001\000\014\005\126\011\046\012\045\013\041\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\132\010\131\001\001\000\002\001\001\000\004\010\142" +
    "\001\001\000\014\005\134\011\046\012\045\013\041\014" +
    "\053\001\001\000\002\001\001\000\010\003\136\004\033" +
    "\015\011\001\001\000\006\004\035\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\145\004\033\015" +
    "\011\001\001\000\006\004\035\015\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\152\011\046\012\045\013\041\014\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\155\011\046\012" +
    "\045\013\041\014\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\160\004\033\015\011\001\001\000" +
    "\006\004\035\015\011\001\001\000\004\006\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\175\004\033\015\011\001\001\000\002\001\001" +
    "\000\014\005\170\011\046\012\045\013\041\014\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\173" +
    "\004\033\015\011\001\001\000\006\004\035\015\011\001" +
    "\001\000\002\001\001\000\006\004\035\015\011\001\001" +
    "\000\002\001\001\000\010\003\207\004\033\015\011\001" +
    "\001\000\002\001\001\000\014\005\202\011\046\012\045" +
    "\013\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\205\004\033\015\011\001\001\000\006" +
    "\004\035\015\011\001\001\000\002\001\001\000\006\004" +
    "\035\015\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\214\011\046\012\045\013" +
    "\041\014\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\227\026\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\246\033" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\270\030" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\275\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\327\024\330" +
    "\001\001\000\004\024\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\357\011\046\012\045" +
    "\013\041\014\053\001\001\000\002\001\001\000\014\005" +
    "\361\011\046\012\045\013\041\014\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\367\004\033\015\011" +
    "\001\001\000\006\004\035\015\011\001\001\000\002\001" +
    "\001\000\014\005\372\011\046\012\045\013\041\014\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\375\004\033\015\011\001\001\000\006\004\035\015\011" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Map<String, String> simbolos = new HashMap<>();
    public LinkedList<String> barraPalabras = new LinkedList<>();
    public LinkedList<String> barraValores = new LinkedList<>();
    public String barraTitulo = "";
    public String barraTituloX = "";
    public String barraTituloY = "";
    public LinkedList<Instruccion> AST;
    public LinkedList<ErrorSintactico> errores = new LinkedList<>();
    public void error_sintactico(Symbol s) {
        if (s.value != null)
            errores.add(new ErrorSintactico(s.value.toString(), s.left, s.right));
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
                throw new Exception("Error irrecuperable en (linea, columna): " + s.left + ", " + s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= VOID MAIN PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ mainstatements LLAVE_DER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		parser.AST=s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatements mainstatement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion t = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<Instruccion>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainstatement ::= funciones 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainstatement",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // funciones ::= VOID DEFINIRGLOBALES PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ declaraciones LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funciones ::= VOID GRAFICABARRAS PARENTESIS_IZQ PARENTESIS_DER LLAVE_IZQ instruccionesBarra LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funciones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccionesBarra ::= instruccionesBarra instruccionBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesBarra",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccionesBarra ::= instruccionBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionesBarra",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccionBarra ::= TYPEDEF TITULO IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 barraTitulo = simbolos.get(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccionBarra ::= TYPEDEF TITULO IGUAL STR PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 barraTitulo = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccionBarra ::= TYPEDEF TITULOX IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 barraTituloX = simbolos.get(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccionBarra ::= TYPEDEF TITULOX IGUAL STR PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 barraTituloX = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccionBarra ::= TYPEDEF TITULOY IGUAL STR PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 barraTituloY = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccionBarra ::= TYPEDEF TITULOY IGUAL ID PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 barraTituloY = simbolos.get(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccionBarra ::= TYPEDEF CORCHETE_IZQ CORCHETE_DER EJEX IGUAL LLAVE_IZQ ejesxBarra LLAVE_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccionBarra ::= TYPEDEF CORCHETE_IZQ CORCHETE_DER VALORES IGUAL LLAVE_IZQ asignacionesBarra LLAVE_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionBarra",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ejesxBarra ::= ejesxBarra COMA ejexBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejesxBarra",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ejesxBarra ::= ejexBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejesxBarra",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ejexBarra ::= ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 barraPalabras.add(simbolos.get(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejexBarra",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ejexBarra ::= STR 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 barraPalabras.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejexBarra",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ejexBarra ::= DOLAR LLAVE_IZQ NEWVALOR COMA STR COMA STR LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		barraPalabras.add(utilidades.GetJSON.getJSON(a,b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejexBarra",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacionesBarra ::= asignacionesBarra COMA asignacionBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionesBarra",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacionesBarra ::= asignacionBarra 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionesBarra",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacionBarra ::= ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 barraValores.add(simbolos.get(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionBarra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacionBarra ::= NUM 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 barraValores.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionBarra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacionBarra ::= DOLAR LLAVE_IZQ NEWVALOR COMA STR COMA STR LLAVE_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		barraValores.add(utilidades.GetJSON.getJSON(a,b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacionBarra",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaraciones ::= declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion ::= TYPEDEF ID IGUAL STR PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		simbolos.put(t,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion ::= TYPEDEF ID IGUAL NUM PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		simbolos.put(t,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion ::= TYPEDEF ID IGUAL DOLAR LLAVE_IZQ NEWVALOR COMA STR COMA STR LLAVE_DER PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		simbolos.put(t, utilidades.GetJSON.getJSON(utilidades.Utils.strs(a),utilidades.Utils.strs(b)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= statements statement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion t = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= statement 
            {
              LinkedList<Instruccion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<Instruccion>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= TYPEDEF ID IGUAL expr PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Asignacion(t,n,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= TYPEDEF ID PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Declaracion(e,n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= ID IGUAL expr PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ReAsignacion(i,e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= if 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=i;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= FOR PARENTESIS_IZQ TYPEDEF ID IGUAL expr PUNTO_COMA expr PUNTO_COMA ID INCREMENTO PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Operacion f = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new For(i,e,f,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= WHILE PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new While(e,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= DO LLAVE_IZQ statements LLAVE_DER WHILE PARENTESIS_IZQ expr PARENTESIS_DER PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(e,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= CONSOLE PUNTO WRITE PARENTESIS_IZQ impresiones PARENTESIS_DER PUNTO_COMA 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ImprimirExpresion> s = (LinkedList<ImprimirExpresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Imprimir(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= SWITCH PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ cases LLAVE_DER 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(e,c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= SWITCH PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ cases DEFAULT DOS_PUNTOS statements LLAVE_DER 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Switch(e,c,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= SWITCH_BREAK PUNTO_COMA 
            {
              Instruccion RESULT =null;
		RESULT = new SentenciaBreak();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= error PUNTO_COMA 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= error LLAVE_DER 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // impresiones ::= impresiones impresion 
            {
              LinkedList<ImprimirExpresion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ImprimirExpresion> s = (LinkedList<ImprimirExpresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ImprimirExpresion t = (ImprimirExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // impresiones ::= impresion 
            {
              LinkedList<ImprimirExpresion> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ImprimirExpresion s = (ImprimirExpresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<ImprimirExpresion>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // impresion ::= expr SUMA 
            {
              ImprimirExpresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ImprimirExpresion(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // impresion ::= expr 
            {
              ImprimirExpresion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ImprimirExpresion(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(e,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER ELSE LLAVE_IZQ statements LLAVE_DER 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> p = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(e,p,s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER elifs 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(e,s,f, null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if ::= IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER elifs ELSE LLAVE_IZQ statements LLAVE_DER 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> p = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new If(e,s,f,p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elifs ::= elifs ELSE IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              LinkedList<Elif> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = f; RESULT.add(new Elif(e, s));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elifs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elifs ::= ELSE IF PARENTESIS_IZQ expr PARENTESIS_DER LLAVE_IZQ statements LLAVE_DER 
            {
              LinkedList<Elif> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new LinkedList<Elif>(); RESULT.add(new Elif(e, s));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elifs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cases ::= cases case 
            {
              LinkedList<Case> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Case> s = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case t = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cases ::= case 
            {
              LinkedList<Case> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case s = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LinkedList<Case>(); RESULT.add(s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cases",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // case ::= CASE expr DOS_PUNTOS statements 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(e,s, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // case ::= CASE expr DOS_PUNTOS statements SWITCH_BREAK 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> s = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Case(e,s, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= symbols 
            {
              Operacion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion s = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= unitary 
            {
              Operacion RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion u = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = u;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= aritmetic 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= logical 
            {
              Operacion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion l = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= PARENTESIS_IZQ expr PARENTESIS_DER 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Operacion(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // aritmetic ::= expr SUMA expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.SUMA, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // aritmetic ::= expr RESTA expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.RESTA, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // aritmetic ::= expr MULTIPLICACION expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MULTIPLICACION, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // aritmetic ::= expr DIVISION expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.DIVISION, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // aritmetic ::= NUM 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Operacion(n, EnumTerminals.NUM); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aritmetic",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical ::= expr MAYOR expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MAYOR, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical ::= expr MENOR expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MENOR, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logical ::= expr MAYOR_IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MAYOR_IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logical ::= expr MENOR_IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.MENOR_IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logical ::= expr IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logical ::= expr NO_IGUAL expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.NO_IGUAL, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logical ::= expr AND expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.AND, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // logical ::= expr OR expr 
            {
              Operacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Operacion a = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion b = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(a, EnumOperaciones.OR, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // logical ::= BOOLEAN 
            {
              Operacion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(b, EnumTerminals.BOOL);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // symbols ::= ID 
            {
              Operacion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(i, EnumTerminals.ID);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // symbols ::= STR 
            {
              Operacion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(s, EnumTerminals.STR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // symbols ::= CHAR 
            {
              Operacion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(c, EnumTerminals.CHAR);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("symbols",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unitary ::= RESTA expr 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(e, EnumUnitaryOperations.NEGATIVE);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitary",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unitary ::= NOT expr 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Operacion e = (Operacion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Operacion(e, EnumUnitaryOperations.NOT);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unitary",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
