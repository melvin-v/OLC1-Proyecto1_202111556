/* The following code was generated by JFlex 1.7.0 */

package analizadores;

import errores.ErrorLexico;import java_cup.runtime.Symbol;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/analizadores/lexicoStatPy.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\5\1\5\1\4\22\0\1\13\1\46\1\7"+
    "\3\0\1\47\1\24\1\54\1\55\1\6\1\52\1\0\1\53\1\11"+
    "\1\2\12\10\1\51\1\50\1\45\1\43\1\44\2\0\1\21\1\35"+
    "\1\36\1\33\1\17\1\20\1\40\1\37\1\31\1\25\1\62\1\22"+
    "\1\42\1\32\1\34\2\25\1\15\1\26\1\14\1\16\1\41\1\60"+
    "\3\25\4\0\1\27\1\0\1\21\1\35\1\36\1\33\1\17\1\20"+
    "\1\40\1\37\1\31\1\25\1\62\1\22\1\42\1\32\1\34\2\25"+
    "\1\15\1\26\1\14\1\16\1\41\1\60\3\25\1\56\1\12\1\57"+
    "\7\0\1\5\252\0\2\30\115\0\1\23\u1ea8\0\1\5\1\5\u0100\0"+
    "\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\1\4\10\2\1\1\10\1\1\6\10\1\11"+
    "\1\12\1\13\1\14\1\1\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\10\3\0\1\25\1\0"+
    "\1\26\4\10\3\0\2\10\1\27\1\0\1\27\2\10"+
    "\1\30\7\10\1\11\1\31\1\32\1\33\1\34\1\35"+
    "\2\10\2\2\1\0\1\6\1\10\1\0\2\10\1\36"+
    "\2\0\1\37\2\10\2\40\4\10\1\0\3\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\10\2\0"+
    "\1\41\2\42\3\0\5\10\2\43\1\0\1\10\2\44"+
    "\2\45\1\0\1\10\1\0\1\10\1\0\1\2\1\41"+
    "\2\0\4\10\1\0\1\10\1\0\1\10\2\46\2\47"+
    "\2\50\1\10\2\0\1\10\1\51\1\52\2\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\63\0\314\0\377"+
    "\0\63\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\63\0\63\0\u052e"+
    "\0\63\0\63\0\63\0\63\0\63\0\u0561\0\u0594\0\u05c7"+
    "\0\314\0\63\0\u05fa\0\63\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\63\0\u07f8\0\u0198"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\u0a29\0\u0a5c\0\63\0\u0a8f\0\u0ac2\0\u05fa\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0198\0\u0bc1\0\u0bf4\0\63\0\u0c27\0\u0c5a"+
    "\0\63\0\u0198\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u0198\0\63\0\u0198\0\u1023"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\63"+
    "\0\u0198\0\u11bb\0\u11ee\0\63\0\u0198\0\63\0\u0198\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u12ed\0\63\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb"+
    "\0\63\0\u0198\0\63\0\u0198\0\63\0\u0198\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u0198\0\63\0\63\0\u0198";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\3\1\13\2\14\1\15\1\16"+
    "\2\14\1\17\1\20\1\14\1\21\1\2\1\22\1\23"+
    "\1\14\1\24\1\14\1\25\1\26\2\14\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\2\1\14"+
    "\64\0\1\3\2\0\1\3\6\0\1\3\51\0\1\47"+
    "\3\0\1\50\54\0\7\51\1\52\53\51\10\0\1\10"+
    "\1\53\63\0\1\54\60\0\1\14\3\0\1\14\1\55"+
    "\5\14\2\0\3\14\1\0\12\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\7\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\0\1\14\10\0\1\14\3\0"+
    "\6\14\1\56\2\0\3\14\1\0\12\14\15\0\1\14"+
    "\1\0\1\14\10\0\1\14\3\0\5\14\1\57\1\14"+
    "\2\0\3\14\1\0\3\14\1\60\6\14\15\0\1\14"+
    "\1\0\1\14\14\0\1\61\43\0\1\62\16\0\7\63"+
    "\2\0\2\63\2\0\12\63\15\0\1\63\1\0\1\63"+
    "\10\0\1\14\3\0\1\64\6\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\65\1\0\1\14\20\0\1\66\11\0"+
    "\1\67\40\0\1\14\3\0\4\14\1\70\2\14\2\0"+
    "\3\14\1\0\1\14\1\71\10\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\3\14\1\72\3\14\2\0"+
    "\3\14\1\0\3\14\1\73\6\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\1\14\1\74\5\14\2\0"+
    "\3\14\1\0\3\14\1\75\6\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\5\14\1\76\1\14\2\0"+
    "\3\14\1\0\3\14\1\77\2\14\1\100\3\14\15\0"+
    "\1\14\1\0\1\14\10\0\1\14\3\0\7\14\2\0"+
    "\3\14\1\0\3\14\1\101\6\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\5\14\1\102\1\14\2\0"+
    "\3\14\1\0\12\14\15\0\1\14\1\0\1\14\43\0"+
    "\1\103\62\0\1\104\62\0\1\105\62\0\1\106\66\0"+
    "\1\107\65\0\1\110\20\0\1\14\3\0\1\14\1\111"+
    "\5\14\2\0\3\14\1\0\6\14\1\112\3\14\15\0"+
    "\1\14\1\0\1\14\3\47\1\113\1\114\1\0\55\47"+
    "\6\50\1\115\54\50\10\0\1\116\1\0\2\116\57\0"+
    "\1\14\3\0\2\14\1\117\4\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\0\1\14\10\0\1\14\3\0"+
    "\7\14\1\120\1\0\1\14\1\121\1\14\1\0\12\14"+
    "\15\0\1\14\1\0\1\14\10\0\1\14\3\0\6\14"+
    "\1\122\2\0\3\14\1\0\12\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\1\14\1\123\5\14\2\0"+
    "\3\14\1\0\12\14\15\0\1\14\1\0\1\14\15\0"+
    "\1\124\75\0\2\125\55\0\1\126\46\0\1\14\3\0"+
    "\1\14\1\127\5\14\2\0\3\14\1\0\12\14\15\0"+
    "\1\14\1\0\1\14\10\0\1\14\3\0\7\14\2\0"+
    "\3\14\1\125\1\130\11\14\15\0\1\14\1\0\1\14"+
    "\14\0\1\131\56\0\1\14\3\0\1\132\6\14\2\0"+
    "\3\14\1\0\12\14\15\0\1\14\1\0\1\14\10\0"+
    "\1\14\3\0\4\14\1\133\2\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\0\1\14\10\0\1\14\3\0"+
    "\2\14\1\134\4\14\2\0\3\14\1\0\12\14\15\0"+
    "\1\14\1\0\1\14\10\0\1\14\3\0\3\14\1\135"+
    "\3\14\2\0\3\14\1\0\12\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\7\14\2\0\3\14\1\0"+
    "\3\14\1\136\6\14\15\0\1\14\1\0\1\14\10\0"+
    "\1\14\3\0\7\14\1\137\1\0\1\14\1\140\1\14"+
    "\1\0\12\14\15\0\1\14\1\0\1\14\10\0\1\14"+
    "\3\0\7\14\2\0\3\14\1\0\1\14\1\141\10\14"+
    "\15\0\1\14\1\0\1\14\10\0\1\14\3\0\5\14"+
    "\1\142\1\14\2\0\3\14\1\0\12\14\15\0\1\14"+
    "\1\0\1\14\10\0\1\14\3\0\7\14\2\0\3\14"+
    "\1\143\1\144\11\14\15\0\1\14\1\0\1\14\10\0"+
    "\1\14\3\0\7\14\2\0\3\14\1\145\1\146\11\14"+
    "\15\0\1\14\1\0\1\14\10\0\1\14\3\0\7\14"+
    "\2\0\3\14\1\147\1\150\11\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\7\14\2\0\3\14\1\151"+
    "\1\152\11\14\15\0\1\14\1\0\1\14\3\0\1\113"+
    "\57\0\2\153\1\113\3\153\1\154\54\153\10\0\1\14"+
    "\3\0\3\14\1\155\3\14\2\0\3\14\1\0\12\14"+
    "\15\0\1\14\1\0\1\14\17\0\1\156\53\0\1\14"+
    "\3\0\3\14\1\157\3\14\2\0\3\14\1\0\12\14"+
    "\15\0\1\14\1\0\1\14\10\0\1\14\3\0\7\14"+
    "\1\160\1\0\1\14\1\117\1\14\1\0\12\14\15\0"+
    "\1\14\1\0\1\14\30\0\2\161\45\0\1\162\56\0"+
    "\1\14\3\0\7\14\2\0\3\14\1\161\1\163\11\14"+
    "\15\0\1\14\1\0\1\14\10\0\1\14\3\0\1\164"+
    "\6\14\2\0\3\14\1\0\12\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\5\14\1\165\1\14\2\0"+
    "\3\14\1\0\12\14\15\0\1\14\1\0\1\14\10\0"+
    "\1\14\3\0\7\14\2\0\3\14\1\0\4\14\1\166"+
    "\5\14\15\0\1\14\1\0\1\14\10\0\1\14\3\0"+
    "\5\14\1\167\1\14\2\0\3\14\1\0\12\14\15\0"+
    "\1\14\1\0\1\14\10\0\1\14\3\0\6\14\1\132"+
    "\2\0\3\14\1\0\12\14\15\0\1\14\1\0\1\14"+
    "\17\0\1\170\53\0\1\14\3\0\3\14\1\171\3\14"+
    "\2\0\3\14\1\0\12\14\15\0\1\14\1\0\1\14"+
    "\10\0\1\14\3\0\7\14\1\172\1\0\1\14\1\173"+
    "\1\14\1\0\12\14\15\0\1\14\1\0\1\14\10\0"+
    "\1\14\3\0\1\14\1\132\5\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\0\1\14\33\0\1\174\37\0"+
    "\1\14\3\0\7\14\2\0\3\14\1\0\2\14\1\175"+
    "\7\14\15\0\1\14\1\0\1\14\32\0\1\176\40\0"+
    "\1\14\3\0\7\14\2\0\3\14\1\0\1\14\1\177"+
    "\10\14\15\0\1\14\1\0\1\14\14\0\1\200\56\0"+
    "\1\14\3\0\1\201\6\14\2\0\3\14\1\0\12\14"+
    "\15\0\1\14\1\0\1\14\22\0\1\202\50\0\1\14"+
    "\3\0\6\14\1\203\2\0\3\14\1\0\12\14\15\0"+
    "\1\14\1\0\1\14\2\50\1\204\3\50\1\115\56\50"+
    "\1\205\3\50\1\115\54\50\17\0\1\206\75\0\1\207"+
    "\66\0\1\210\34\0\1\14\3\0\7\14\2\0\3\14"+
    "\1\0\1\14\1\211\10\14\15\0\1\14\1\0\1\14"+
    "\10\0\1\14\3\0\7\14\2\0\3\14\1\0\5\14"+
    "\1\212\4\14\15\0\1\14\1\0\1\14\10\0\1\14"+
    "\3\0\2\14\1\213\4\14\2\0\3\14\1\0\12\14"+
    "\15\0\1\14\1\0\1\14\10\0\1\14\3\0\6\14"+
    "\1\214\2\0\3\14\1\0\12\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\7\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\215\1\216\34\0\1\217\36\0"+
    "\1\14\3\0\7\14\2\0\3\14\1\0\3\14\1\220"+
    "\6\14\15\0\1\14\1\0\1\14\17\0\1\221\53\0"+
    "\1\14\3\0\3\14\1\222\3\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\0\1\14\17\0\1\223\53\0"+
    "\1\14\3\0\3\14\1\224\3\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\0\1\14\2\0\1\153\120\0"+
    "\1\131\61\0\1\225\33\0\1\14\3\0\7\14\2\0"+
    "\3\14\1\0\7\14\1\132\2\14\15\0\1\14\1\0"+
    "\1\14\10\0\1\14\3\0\7\14\2\0\3\14\1\0"+
    "\6\14\1\226\3\14\15\0\1\14\1\0\1\14\10\0"+
    "\1\14\3\0\6\14\1\227\2\0\3\14\1\0\12\14"+
    "\15\0\1\14\1\0\1\14\10\0\1\14\3\0\3\14"+
    "\1\132\3\14\2\0\3\14\1\0\12\14\15\0\1\14"+
    "\1\0\1\14\13\0\1\230\57\0\1\14\2\0\1\230"+
    "\7\14\2\0\3\14\1\0\12\14\15\0\1\14\1\0"+
    "\1\14\22\0\1\231\50\0\1\14\3\0\6\14\1\232"+
    "\2\0\3\14\1\0\12\14\15\0\1\14\1\0\1\14"+
    "\10\0\1\14\3\0\1\233\6\14\2\0\3\14\1\0"+
    "\12\14\15\0\1\14\1\0\1\14\13\0\1\234\66\0"+
    "\1\235\53\0\1\14\3\0\3\14\1\236\3\14\2\0"+
    "\3\14\1\0\12\14\15\0\1\14\1\0\1\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5610];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\1\11\24\1\2\11"+
    "\1\1\5\11\1\1\3\0\1\11\1\0\1\11\4\1"+
    "\3\0\2\1\1\11\1\0\13\1\6\11\2\1\1\11"+
    "\1\1\1\0\2\1\1\0\3\1\2\0\1\11\2\1"+
    "\1\11\5\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\1\11\1\1"+
    "\3\0\5\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\0\4\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\0\2\1\2\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public LinkedList<ErrorLexico> lexicalErrors;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  lexicalErrors = new LinkedList<>();
    yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { lexicalErrors.add(new ErrorLexico(yytext(), yyline, (int) yychar)); }");
            { lexicalErrors.add(new ErrorLexico(yytext(), yyline, (int) yychar));
            } 
            // fall through
          case 44: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] {  }");
            { 
            } 
            // fall through
          case 45: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return new Symbol(sym.DIVISION, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.DIVISION, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 46: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { yychar=1; }");
            { yychar=1;
            } 
            // fall through
          case 47: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return new Symbol(sym.MULTIPLICACION, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.MULTIPLICACION, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 48: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return new Symbol(sym.NUM, yyline, (int) yychar, yytext()); }");
            { return new Symbol(sym.NUM, yyline, (int) yychar, yytext());
            } 
            // fall through
          case 49: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return new Symbol(sym.PUNTO, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.PUNTO, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 50: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return new Symbol(sym.ID, yyline, (int) yychar, (yytext())); }");
            { return new Symbol(sym.ID, yyline, (int) yychar, (yytext()));
            } 
            // fall through
          case 51: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [44] { return new Symbol(sym.IGUAL, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.IGUAL, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 52: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [45] { return new Symbol(sym.MAYOR, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.MAYOR, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 53: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [46] { return new Symbol(sym.MENOR, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.MENOR, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 54: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return new Symbol(sym.NOT, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.NOT, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 55: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return new Symbol(sym.PUNTO_COMA, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.PUNTO_COMA, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 56: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return new Symbol(sym.DOS_PUNTOS, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.DOS_PUNTOS, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 57: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return new Symbol(sym.SUMA, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.SUMA, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 58: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return new Symbol(sym.RESTA, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.RESTA, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 59: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [67] { return new Symbol(sym.PARENTESIS_IZQ, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.PARENTESIS_IZQ, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 60: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { return new Symbol(sym.PARENTESIS_DER, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.PARENTESIS_DER, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return new Symbol(sym.LLAVE_IZQ, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.LLAVE_IZQ, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 62: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { return new Symbol(sym.LLAVE_DER, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.LLAVE_DER, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 63: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return new Symbol(sym.STR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1)); }");
            { return new Symbol(sym.STR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            } 
            // fall through
          case 64: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [52] { return new Symbol(sym.OR, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.OR, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return new Symbol(sym.IF, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.IF, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return new Symbol(sym.DO, yyline, (int) yychar, yytext()); }");
            { return new Symbol(sym.DO, yyline, (int) yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [47] { return new Symbol(sym.MAYOR_IGUAL, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.MAYOR_IGUAL, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return new Symbol(sym.MENOR_IGUAL, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.MENOR_IGUAL, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return new Symbol(sym.NO_IGUAL, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.NO_IGUAL, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [53] { return new Symbol(sym.AND, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.AND, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return new Symbol(sym.INCREMENTO, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.INCREMENTO, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return new Symbol(sym.FOR, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.FOR, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [98] { return new Symbol(sym.CHAR, yyline, (int) yychar, (yytext())); }");
            { return new Symbol(sym.CHAR, yyline, (int) yychar, (yytext()));
            } 
            // fall through
          case 74: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { return new Symbol(sym.TYPEDEF, yyline, (int) yychar, yytext()); }");
            { return new Symbol(sym.TYPEDEF, yyline, (int) yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return new Symbol(sym.BOOLEAN, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.BOOLEAN, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return new Symbol(sym.ELSE, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.ELSE, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return new Symbol(sym.CASE, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.CASE, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [41] { return new Symbol(sym.VOID, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.VOID, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return new Symbol(sym.MAIN, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.MAIN, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return new Symbol(sym.WRITE, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.WRITE, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return new Symbol(sym.WHILE, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.WHILE, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return new Symbol(sym.SWITCH, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.SWITCH, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return new Symbol(sym.DEFAULT, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.DEFAULT, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return new Symbol(sym.SWITCH_BREAK, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.SWITCH_BREAK, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return new Symbol(sym.CONSOLE, yyline,(int) yychar, yytext()); }");
            { return new Symbol(sym.CONSOLE, yyline,(int) yychar, yytext());
            } 
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexico [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexico scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexico(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
